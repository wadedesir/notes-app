openapi: 3.0.0
info:
  title: Notes API
  version: 1.1.0
  description: Notes API for managing users, notes, and login.

tags:
  - name: Users
    description: Operations related to users.
  - name: Notes
    description: Operations related to notes.
  - name: Login
    description: Operations related to login.

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: The user's ID.
        name:
          type: string
          description: The user's name.
        username:
          type: string
          description: The user's username.
      required:
        - id
        - name
        - username

    UserCreate:
      type: object
      properties:
        name:
          type: string
          description: The user's name.
        username:
          type: string
          description: The user's username.
        password:
          type: string
          format: password
          description: The user's password.
      required:
        - name
        - username
        - password

    UserUpdate:
      type: object
      properties:
        name:
          type: string
          description: The user's name.
        username:
          type: string
          description: The user's username.
        password:
          type: string
          format: password
          description: The user's password.
      required:
        - name
        - username
        - password

    Note:
      type: object
      properties:
        id:
          type: string
          description: The note's ID.
        content:
          type: string
          description: The note's content.
        important:
          type: boolean
          description: Indicates whether the note is important.
        user:
          $ref: '#/components/schemas/User'
      required:
        - id
        - content
        - important
        - user

    NoteCreate:
      type: object
      properties:
        content:
          type: string
          description: The note's content.
        important:
          type: boolean
          description: Indicates whether the note is important.
      required:
        - content

    NoteUpdate:
      type: object
      properties:
        content:
          type: string
          description: The updated note's content.
        important:
          type: boolean
          description: Indicates whether the note is important.
      required:
        - content

    LoginCredentials:
      type: object
      properties:
        username:
          type: string
          description: The user's username.
        password:
          type: string
          format: password
          description: The user's password.
      required:
        - username
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: The JWT token for authentication.

paths:
  /v1/users:
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              example:
                - id: "123"
                  name: "John Doe"
                  username: "johndoe"
                - id: "456"
                  name: "Jane Smith"
                  username: "janesmith"

    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: The created user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: "789"
                name: "Alice Johnson"
                username: "alice"
        '400':
          description: Bad request.

  /v1/users/{id}:
    get:
      summary: Get user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: "123"
                name: "John Doe"
                username: "johndoe"
        '404':
          description: User not found.
          content:
            application/json:
              example:
                error: "User not found."

    put:
      summary: Update user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: The updated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: "123"
                name: "Updated Name"
                username: "updated_username"
        '404':
          description: User not found.
          content:
            application/json:
              example:
                error: "User not found."

    delete:
      summary: Delete user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully.
        '404':
          description: User not found.
          content:
            application/json:
              example:
                error: "User not found."

  /v1/notes:
    get:
      summary: Get all notes
      tags:
        - Notes
      responses:
        '200':
          description: A list of notes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
              example:
                - id: "abc123"
                  content: "Lorem ipsum"
                  important: true
                  user:
                    id: "123"
                    username: "johndoe"
                    name: "John Doe"
                - id: "def456"
                  content: "Dolor sit amet"
                  important: false
                  user:
                    id: "456"
                    username: "janesmith"
                    name: "Jane Smith"

    post:
      summary: Create a new note
      tags:
        - Notes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteCreate'
      responses:
        '201':
          description: The created note.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
              example:
                id: "ghi789"
                content: "New Note"
                important: true
                user:
                  id: "789"
                  username: "alice"
                  name: "Alice Johnson"
        '400':
          description: Bad request.
        '401':
          description: Unauthorized.

  /v1/notes/{id}:
    get:
      summary: Get note by ID
      tags:
        - Notes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The note.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
              example:
                id: "abc123"
                content: "Lorem ipsum"
                important: true
                user:
                  id: "123"
                  username: "johndoe"
                  name: "John Doe"
        '404':
          description: Note not found.
          content:
            application/json:
              example:
                error: "Note not found."

    put:
      summary: Update note by ID
      tags:
        - Notes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteUpdate'
      responses:
        '200':
          description: The updated note.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
              example:
                id: "abc123"
                content: "Updated Content"
                important: true
                user:
                  id: "123"
                  username: "johndoe"
                  name: "John Doe"
        '404':
          description: Note not found.
          content:
            application/json:
              example:
                error: "Note not found."

    delete:
      summary: Delete note by ID
      tags:
        - Notes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Note deleted successfully.
        '404':
          description: Note not found.
          content:
            application/json:
              example:
                error: "Note not found."

  /v1/login:
    post:
      summary: Authenticate user
      tags:
        - Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              example:
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjEyMyJ9.xxxxxx"
        '400':
          description: Bad request.
        '401':
          description: Unauthorized.
